/*
 * Copyright (c) 2019 Roman Fatnev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
parser(parserTemplate) ::= <<
package <parserTemplate.package>;

<parserTemplate.imports: {import| import <import>;}; separator="\n">
<parserTemplate.environment.packages: {package| import <package>;}; separator="\n">

public class <parserTemplate.className> extends AbstractParser implements <parserTemplate.interface> {

    //Terminals
    <parserTemplate.alphabet.letters: {letter|private final Terminal <letter.tag.value> = terminal("<letter.tag.value>");}; separator="\n">

    //NonTerminals
    <parserTemplate.grammar.productions: {prod|private final CallableNonTerminal <prod.identifier.value> = callableNonTerminal("<prod.identifier.value>", this::<prod.identifier.value>);}; separator="\n">

    private final Lexer lexer = Lexer.get(new LexerAbstractModule() {
             @Override
             public void configure() {
                 <parserTemplate.alphabet.letters: {letter|tokenize(<letter.tag.value>).pattern("<letter.pattern>").priority(<letter.priority>).hidden(<letter.hidden>);}; separator="\n">
             }
         });

    <parserTemplate.environment.dependencies: {dependency| private final <dependency.clazz.simpleName> <dependency.name>;}; separator="\n">

    public <parserTemplate.className>(
        final Grammar grammar<parserTemplate.environment.dependencies: {dependency|,<\n><\t><\t>final <dependency.clazz.simpleName> <dependency.name>}>
    ) {
        super(new Predictor(grammar.getFirstSet(), grammar.getFollowSet()));
        <parserTemplate.environment.dependencies: {dependency| this.<dependency.name> = <dependency.name>;}; separator="\n">
    }

    <parserTemplate.environment.code>

    @Override
    public AST parse(final CharSequence input) {
        this.stream = new BufferedStream\<>(lexer.analyze(input));
        this.ast = AST.create(<parserTemplate.grammar.axiom>);
        <parserTemplate.grammar.axiom>.call();
        return ast;
    }

    <parserTemplate.grammar.productions: {production|<method("void", production.identifier.value, production.elements)><\n><\n>}>
}
>>

method(returnValue, identifier, elements) ::= <<
private <returnValue> <identifier>() {
    <elements: {element|<element>};separator="\n">
}
>>

ele_group(ele_group) ::= <<
<ele_group.elements: {element|<element>};separator="\n">
>>

non_terminal(non_terminal) ::= <<
<if (non_terminal.nodeAction)>
call(<non_terminal.value>, node -> {
    <non_terminal.nodeAction>
});<else>
call(<non_terminal.value>);<endif>
>>


optional(optional) ::= <<
if(<optional.start: {startElement|canReach(<startElement>)}; separator="\n|| ">) {
    <optional.elements: {element|<element>};separator="\n">
}
>>

or(or) ::= <<
switch(predict(
        <or.alternatives:{alternative|new Alt(<alternative.index>, <alternative.start: {element|"<element>"}; separator=", ">)}; separator=",\n">)
) {
    <or.alternatives: {alternative|case <alternative.index> : {
        <alternative>
        break;
    \}}; separator="\n">
}
>>

repeat(repeat) ::= <<
while(true) {
    if(<repeat.start: {startElement|canReach(<startElement>)}; separator="\n|| ">) {
        <repeat.elements: {element|<element>};separator="\n">
    } else {
        break;
    }
}
>>

repetition(repetition) ::= <<
for(int i<repetition.hash> = 0; i<repetition.hash> \< <repetition.times>; i<repetition.hash>++) {
    <repetition.element>
}
>>

terminal(terminal) ::= <<
<if(terminal.tokenAction)>
match(<terminal.value>, token -> {
    <terminal.tokenAction>
});<else>
match(<terminal.value>);<endif>
>>

inline_action(inline_action) ::= <<
<inline_action.code>
>>

