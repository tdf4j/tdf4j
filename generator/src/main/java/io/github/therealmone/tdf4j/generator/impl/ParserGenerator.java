package io.github.therealmone.tdf4j.generator.impl;

import io.github.therealmone.tdf4j.commons.Module;
import io.github.therealmone.tdf4j.generator.Generator;
import io.github.therealmone.tdf4j.generator.Templates;
import io.github.therealmone.tdf4j.parser.Parser;
import io.github.therealmone.tdf4j.parser.config.AbstractParserModule;
import io.github.therealmone.tdf4j.commons.model.ebnf.Element;
import io.github.therealmone.tdf4j.commons.model.ebnf.Production;
import org.joor.Reflect;
import org.stringtemplate.v4.ST;

public class ParserGenerator implements Generator<Parser> {

    @Override
    public Parser generate(Module module) {
        if(!(module instanceof AbstractParserModule)) {
            throw new RuntimeException("Parser can be generated only from AbstractParserModule");
        }
        return process(((AbstractParserModule) module).build());
    }

    private Parser process(final AbstractParserModule module) {
        final ST parser = build(module);
        final String generatedClassName = "AutoGeneratedParserFrom_" + module.getClass().getName().replaceFirst(module.getClass().getPackage().getName() + ".", "");
        parser.add("package", module.getClass().getPackage().getName());
        parser.add("className", generatedClassName);
        if(module.getInitProduction() == null) {
            throw new RuntimeException("Initial production is null");
        }
        parser.add("initProd", module.getInitProduction());

        System.out.println(parser.render());
        return Reflect.compile(module.getClass().getPackage().getName() + "." + generatedClassName,
                parser.render()
        ).create().get();
    }

    private ST build(final AbstractParserModule module) {
        final ST parser = Templates.PARSER.template();
        parser.add("imports", Templates.IMPORTS.template().render());
        for(final Production production : module.getProductions()) {
            parser.add("methods", buildMethod(production).render());
        }
        return parser;
    }

    private ST buildMethod(final Production production) {
        final ST method = Templates.METHOD_DECLARATION.template();
        method.add("prodDeclaration", production.toString());
        method.add("prodName", production.identifier());
        for(final Element element : production.elements()) {
            switch (element.kind()) {

                case TERMINAL_TAG: {
                    final ST nameCodeBlock = Templates.TERMINAL_TAG_CODE_BLOCK.template();
                    nameCodeBlock.add("terminal", element.asTerminalTag().value());
                    nameCodeBlock.add("elementDeclaration", element.toString());
                    method.add("codeBlocks", nameCodeBlock.render());
                }

                //todo:

                default: {
                    break;
                }
            }
        }
        return method;
    }
}
