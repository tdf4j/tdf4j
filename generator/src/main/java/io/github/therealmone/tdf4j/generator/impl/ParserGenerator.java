package io.github.therealmone.tdf4j.generator.impl;

import io.github.therealmone.tdf4j.commons.Module;
import io.github.therealmone.tdf4j.generator.Generator;
import io.github.therealmone.tdf4j.generator.Templates;
import io.github.therealmone.tdf4j.parser.Parser;
import io.github.therealmone.tdf4j.parser.config.AbstractParserModule;
import org.joor.Reflect;
import org.stringtemplate.v4.ST;

public class ParserGenerator implements Generator<Parser> {

    @Override
    public Parser generate(Module module) {
        if(!(module instanceof AbstractParserModule)) {
            throw new RuntimeException("Parser generates only from AbstractParserModule");
        }
        return process((AbstractParserModule) module);
    }

    private Parser process(final AbstractParserModule module) {
        final ST parser = build(module);
        final String generatedClassName = "AutoGeneratedParserFrom_" + module.getClass().getName().replaceFirst(module.getClass().getPackage().getName() + ".", "");
        parser.add("package", module.getClass().getPackage().getName());
        parser.add("className", generatedClassName);
        System.out.println(parser.render());
        return Reflect.compile(module.getClass().getPackage().getName() + "." + generatedClassName,
                parser.render()
        ).create().get();
    }

    private ST build(final AbstractParserModule module) {
        final ST parser = Templates.PARSER.template();
        parser.add("imports", Templates.IMPORTS.template().render());
        return parser;
    }
}
