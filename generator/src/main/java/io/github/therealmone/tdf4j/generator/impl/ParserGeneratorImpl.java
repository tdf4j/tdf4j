/*
 * Copyright 2019 Roman Fatnev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.therealmone.tdf4j.generator.impl;

import io.github.therealmone.tdf4j.commons.Dependency;
import io.github.therealmone.tdf4j.commons.model.ebnf.NonTerminal;
import io.github.therealmone.tdf4j.commons.model.ebnf.Production;
import io.github.therealmone.tdf4j.commons.utils.Predictor;
import io.github.therealmone.tdf4j.generator.Imports;
import io.github.therealmone.tdf4j.generator.ParserGenerator;
import io.github.therealmone.tdf4j.generator.templates.ImmutableMethodTemplate;
import io.github.therealmone.tdf4j.generator.templates.MethodTemplate;
import io.github.therealmone.tdf4j.generator.templates.ParserTemplate;
import io.github.therealmone.tdf4j.generator.templates.logic.CodeBlock;
import io.github.therealmone.tdf4j.generator.utils.MetaInfCollector;
import io.github.therealmone.tdf4j.parser.MetaInf;
import io.github.therealmone.tdf4j.parser.Parser;
import io.github.therealmone.tdf4j.parser.config.AbstractParserModule;
import org.joor.Reflect;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class ParserGeneratorImpl implements ParserGenerator {
    private final MetaInfCollector metaInfCollector = new MetaInfCollector();

    @Override
    public Parser generate(AbstractParserModule module) {
        return process(module.build(), Parser.class);
    }

    @Override
    public <T extends Parser> T generate(AbstractParserModule module, Class<T> interfaceToImplement) {
        return process(module.build(), interfaceToImplement);
    }

    private <T extends Parser> T process(final AbstractParserModule module, final Class<T> interfaceToImplement) {
        final String generatedClassName = "AutoGeneratedParserFrom_" + module.getClass().getName().replaceFirst(module.getClass().getPackage().getName() + ".", "");
        final ParserTemplate parser = build(
                module,
                generatedClassName,
                module.getClass().getPackage().getName(),
                interfaceToImplement
        );
        return Reflect.compile(module.getClass().getPackage().getName() + "." + generatedClassName,
                parser.build()
        ).create(args(
                metaInfCollector.collect(parser),
                new Predictor(module.getGrammar().firstSet(), module.getGrammar().followSet()),
                module.getEnvironment().dependencies()
        )).get();
    }

    private ParserTemplate build(final AbstractParserModule module, final String className, final String pack, final Class<? extends Parser> interfaceToImplement) {
        final ParserTemplate.Builder parserBuilder = new ParserTemplate.Builder()
                .className(className)
                .pack(pack)
                .environment(module.getEnvironment())
                .imports(imports(interfaceToImplement.getCanonicalName()))
                .interfaceToImplement(interfaceToImplement.getSimpleName());
        if(module.getGrammar().initProduction() == null) {
            throw new RuntimeException("Initial production is null");
        }
        //noinspection ConstantConditions
        parserBuilder.initProd(module.getGrammar().initProduction());
        parserBuilder.addAllMethods(collectMethods(module.getGrammar().productions()));
        return parserBuilder.build();
    }

    private List<MethodTemplate> collectMethods(final List<Production> productions) {
        final Map<NonTerminal, MethodTemplate.Builder> declaredMethods = new HashMap<>();
        for (final Production production : productions) {
            if(!declaredMethods.containsKey(production.identifier())) {
                declaredMethods.put(production.identifier(), new MethodTemplate.Builder()
                        .name(production.identifier().identifier())
                );
            }

            final MethodTemplate.Builder builder = declaredMethods.get(production.identifier());
            production.elements().forEach(element -> {
                final CodeBlock codeBlock = CodeBlock.fromElement(element);
                if(codeBlock != null) {
                    builder.addCodeBlocks(codeBlock);
                }
            });
        }
        return declaredMethods.values().stream().map((Function<MethodTemplate.Builder, MethodTemplate>) ImmutableMethodTemplate.Builder::build).collect(Collectors.toList());
    }

    private Object[] args(final MetaInf meta, final Predictor predictor, final Dependency[] dependencies) {
        final Object[] args = new Object[dependencies.length + 2];
        args[0] = meta;
        args[1] = predictor;
        for (int i = 0; i < dependencies.length; i++) {
            args[i + 2] = dependencies[i].instance();
        }
        return args;
    }

    private String[] imports(final String... additional) {
        final String[] imports = new String[Imports.values().length + additional.length];
        for (int i = 0; i < Imports.values().length; i++) {
            imports[i] = Imports.values()[i].getValue();
        }
        System.arraycopy(additional, 0, imports, Imports.values().length, additional.length);
        return imports;
    }
}
